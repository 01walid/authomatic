// Generated by CoffeeScript 1.3.3
(function() {
  var $, Authomatic, BaseProvider, OAuth2CrossDomainProvider, OAuth2JsonpProvider, Oauth1JsonpProvider, Oauth1Provider, Oauth2Provider, log,
    __slice = [].slice,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  $ = jQuery;

  log = function() {
    var args;
    args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    if (authomatic.defaults.logging) {
      return console.log.apply(console, ['Authomatic:'].concat(__slice.call(args)));
    }
  };

  window.authomatic = new (Authomatic = (function() {

    function Authomatic() {
      this.addJsonpCallback = __bind(this.addJsonpCallback, this);

    }

    Authomatic.prototype.defaults = {
      logging: true,
      endpoint: null,
      method: "GET",
      params: {},
      headers: {},
      substitute: {},
      beforeEndpoint: function(jqXHR) {},
      afterEndpoint: function(jqXHR) {},
      beforeSend: function(jqXHR) {},
      success: function(data, status, jqXHR) {},
      error: function(jqXHR) {},
      done: function(jqXHR) {}
    };

    Authomatic.prototype.accessDefaults = {
      backend: null,
      substitute: {},
      beforeEndpoint: function(jqXHR) {},
      afterEndpoint: function(jqXHR) {},
      beforeSend: function(jqXHR) {},
      success: function(data, status, jqXHR) {},
      error: function(jqXHR) {},
      done: function(jqXHR) {}
    };

    Authomatic.prototype._openWindow = function(url, width, height) {
      var left, settings, top;
      top = (screen.height / 2) - (height / 2);
      left = (screen.width / 2) - (width / 2);
      settings = "width=" + width + ",height=" + height + ",top=" + top + ",left=" + left;
      return window.open(url, "authomatic:" + url, settings);
    };

    Authomatic.prototype.popup = function(width, height, validator, aSelector, formSelector) {
      var _this = this;
      if (width == null) {
        width = 800;
      }
      if (height == null) {
        height = 600;
      }
      if (validator == null) {
        validator = (function($form) {
          return true;
        });
      }
      if (aSelector == null) {
        aSelector = 'a.authomatic';
      }
      if (formSelector == null) {
        formSelector = 'form.authomatic';
      }
      $(aSelector).click(function(e) {
        e.preventDefault();
        return _this._openWindow(e.target.href, width, height);
      });
      return $(formSelector).submit(function(e) {
        var $form, url;
        e.preventDefault();
        $form = $(e.target);
        url = $form.attr('action') + '?' + $form.serialize();
        if (validator($form)) {
          return _this._openWindow(url, width, height);
        }
      });
    };

    Authomatic.prototype.splitUrl = function(url) {
      return {
        url: url.substring(0, url.indexOf('?')),
        qs: url.substring(url.indexOf('?') + 1)
      };
    };

    Authomatic.prototype.parseQueryString = function(queryString) {
      var item, k, result, v, _i, _len, _ref, _ref1;
      result = {};
      _ref = queryString.split('&');
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        item = _ref[_i];
        _ref1 = item.split('='), k = _ref1[0], v = _ref1[1];
        if (result.hasOwnProperty(k)) {
          if (Array.isArray(result[k])) {
            result[k].push(v);
          } else {
            result[k] = [result[k], v];
          }
        } else {
          result[k] = v;
        }
      }
      return result;
    };

    Authomatic.prototype.deserializeCredentials = function(credentials) {
      var sc;
      sc = decodeURIComponent(credentials).split('\n');
      return {
        id: parseInt(sc[0]),
        type: parseFloat(sc[1]),
        rest: sc.slice(2)
      };
    };

    Authomatic.prototype.getProviderClass = function(credentials) {
      var type;
      type = this.deserializeCredentials(credentials).type;
      if (type > 1 && type < 2) {
        return Oauth1Provider;
      } else if (type > 1 && type < 3) {
        return OAuth2JsonpProvider;
      } else {
        return BaseProvider;
      }
    };

    Authomatic.prototype.access = function(credentials, url, options) {
      var Provider, provider;
      options = $.extend(authomatic.accessDefaults, options);
      url = this.format(url, options.substitute);
      Provider = this.getProviderClass(credentials);
      log("Instantiating " + Provider.name + ".");
      provider = new Provider(options.backend, credentials, url, options);
      return provider.access();
    };

    Authomatic.prototype.format = function(template, substitute) {
      return template.replace(/{([^}]*)}/g, function(match, tag) {
        var level, target, _i, _len, _ref;
        target = substitute;
        _ref = tag.split('.');
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          level = _ref[_i];
          target = target[level];
        }
        return target;
      });
    };

    Authomatic.jsonPCallbackCounter = 0;

    Authomatic.prototype.addJsonpCallback = function(callback) {
      var name, path,
        _this = this;
      Authomatic.jsonPCallbackCounter += 1;
      name = "jsonpCallback" + Authomatic.jsonPCallbackCounter;
      path = "authomatic." + name;
      this[name] = function(data) {
        log('Calling jsonp callback:', path);
        if (typeof callback === "function") {
          callback(data);
        }
        log('Deleting jsonp callback:', path);
        return delete _this[name];
      };
      log('Adding jsonp callback:', path);
      return path;
    };

    return Authomatic;

  })());

  BaseProvider = (function() {

    function BaseProvider(backend, credentials, url, options) {
      var defaults;
      this.backend = backend;
      this.credentials = credentials;
      this.url = url;
      this.access = __bind(this.access, this);

      this.contactProvider = __bind(this.contactProvider, this);

      this.contactBackend = __bind(this.contactBackend, this);

      defaults = {
        method: 'GET',
        params: {},
        complete: function(jqXHR, status) {
          return log('access complete', jqXHR, status);
        },
        success: function(data, status, jqXHR) {
          return log('access succeded', data, jqXHR, status);
        }
      };
      this.options = $.extend(defaults, options);
      this.deserializedCredentials = authomatic.deserializeCredentials(this.credentials);
      this.providerID = this.deserializedCredentials.id;
      this.providerType = this.deserializedCredentials.type;
      this.credentialsRest = this.deserializedCredentials.rest;
    }

    BaseProvider.prototype.contactBackend = function(callback) {
      var data;
      data = {
        credentials: this.credentials,
        url: this.url,
        method: this.options.method,
        params: this.options.params
      };
      log("Contacting backend at " + this.backend + ".");
      return $.get(this.backend, data, callback);
    };

    BaseProvider.prototype.contactProvider = function(requestElements) {
      var body, headers, method, params, url;
      url = requestElements.url, method = requestElements.method, params = requestElements.params, headers = requestElements.headers, body = requestElements.body;
      if (body) {
        params = authomatic.parseQueryString(body);
      }
      this.options['type'] = method;
      this.options['data'] = params;
      this.options['headers'] = headers;
      log("Contacting provider.", url, this.options);
      return $.ajax(url, this.options);
    };

    BaseProvider.prototype.access = function() {
      var _this = this;
      return this.contactBackend(function(data, textStatus, jqXHR) {
        var responseTo;
        responseTo = jqXHR != null ? jqXHR.getResponseHeader('Authomatic-Response-To') : void 0;
        if (responseTo === 'fetch') {
          log("Fetch data returned from backend.", data);
          _this.options.success(data, status, jqXHR);
          return _this.options.complete(jqXHR, textStatus);
        } else if (responseTo === 'elements') {
          log("Request elements data returned from backend.", data);
          return _this.contactProvider(data);
        }
      });
    };

    return BaseProvider;

  })();

  Oauth1Provider = (function(_super) {

    __extends(Oauth1Provider, _super);

    function Oauth1Provider() {
      return Oauth1Provider.__super__.constructor.apply(this, arguments);
    }

    return Oauth1Provider;

  })(BaseProvider);

  Oauth1JsonpProvider = (function(_super) {

    __extends(Oauth1JsonpProvider, _super);

    function Oauth1JsonpProvider() {
      return Oauth1JsonpProvider.__super__.constructor.apply(this, arguments);
    }

    return Oauth1JsonpProvider;

  })(Oauth1Provider);

  Oauth2Provider = (function(_super) {

    __extends(Oauth2Provider, _super);

    function Oauth2Provider() {
      var args, _ref;
      args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      this.handleTokenType = __bind(this.handleTokenType, this);

      this.handlePOST = __bind(this.handlePOST, this);

      this._x_unifyDifferences = __bind(this._x_unifyDifferences, this);

      Oauth2Provider.__super__.constructor.apply(this, args);
      this._x_unifyDifferences();
      _ref = this.credentialsRest, this.accessToken = _ref[0], this.refreshToken = _ref[1], this.expirationTime = _ref[2], this.tokenType = _ref[3];
    }

    Oauth2Provider.prototype._x_unifyDifferences = function() {
      this._x_bearer = 'Bearer';
      return this._x_accessToken = 'access_token';
    };

    Oauth2Provider.prototype.handlePOST = function() {
      var qs, url, _ref, _ref1;
      if ((_ref = this.options.method) === 'POST' || _ref === 'PUT') {
        _ref1 = authomatic.splitUrl(this.url), url = _ref1.url, qs = _ref1.qs;
        return this.params = $.extend(this.options.params, authomatic.parseQueryString(qs));
      }
    };

    Oauth2Provider.prototype.handleTokenType = function() {
      if (this.tokenType === '1') {
        return this.options.headers['Authorization'] = "" + this._x_bearer + " " + accessToken;
      } else {
        return this.options.params[this._x_accessToken] = this.accessToken;
      }
    };

    return Oauth2Provider;

  })(BaseProvider);

  OAuth2CrossDomainProvider = (function(_super) {

    __extends(OAuth2CrossDomainProvider, _super);

    function OAuth2CrossDomainProvider() {
      this.access = __bind(this.access, this);
      return OAuth2CrossDomainProvider.__super__.constructor.apply(this, arguments);
    }

    OAuth2CrossDomainProvider.prototype.access = function() {
      var requestElements;
      this.handlePOST();
      this.handleTokenType();
      requestElements = {
        url: this.url,
        method: this.options.method,
        params: this.options.params,
        headers: this.options.headers
      };
      return this.contactProvider(requestElements);
    };

    return OAuth2CrossDomainProvider;

  })(Oauth2Provider);

  OAuth2JsonpProvider = (function(_super) {

    __extends(OAuth2JsonpProvider, _super);

    function OAuth2JsonpProvider() {
      this.contactProvider = __bind(this.contactProvider, this);
      return OAuth2JsonpProvider.__super__.constructor.apply(this, arguments);
    }

    OAuth2JsonpProvider.prototype.contactProvider = function(requestElements) {
      var body, headers, method, params, url;
      url = requestElements.url, method = requestElements.method, params = requestElements.params, headers = requestElements.headers, body = requestElements.body;
      if (body) {
        params = authomatic.parseQueryString(body);
      }
      this.options.type = method;
      this.options.data = params;
      this.options.headers = headers;
      this.options.jsonpCallback = authomatic.addJsonpCallback(this.options.success);
      log("Contacting provider.", url, this.options);
      return $.ajax(url, this.options);
    };

    return OAuth2JsonpProvider;

  })(OAuth2CrossDomainProvider);

  window.pokus = function() {
    var backend, fbCredentials, fbUrl, options, twCredentials, twUrl;
    backend = 'http://authomatic.com:8080/json';
    twUrl = 'https://api.twitter.com/1.1/statuses/user_timeline.json';
    twCredentials = '5%0A1.5%0A1186245026-TI2YCrKLCsdXH7PeFE8zZPReKDSQ5BZxHzpjjel%0A1Xhim7w8N9rOs05WWC8rnwIzkSz1lCMMW9TSPLVtfk';
    fbUrl = 'https://graph.facebook.com/737583375/feed';
    fbCredentials = '15%0A2.5%0ABAAG3FAWiCwIBAJn0CKLOphV4meEbBvUcGcAXIN0z1Pv2JtCrziXlKvM99WX3p4YxI9oHC02ZCpsv7d3CZCsTMy9lqZAohaypwb3nGSKAscqngzFVTOULGLRd5ygXQYtqcka1iERfZAfZA8KQjx7Mps0izinhKyV0EGCJo1HhQcOjx1QYiCAEp%0A%0A1370766038%0A0';
    options = {
      method: 'POST',
      params: {
        message: 'keket'
      },
      success: function(data, status, jqXHR) {
        return log('hura, podarilo sa:', data);
      }
    };
    authomatic.accessDefaults.backend = 'http://authomatic.com:8080/json';
    return authomatic.access(fbCredentials, fbUrl, options);
  };

  window.cb = function(data) {
    return console.log('CALLBACK', data);
  };

}).call(this);
